name: Deploy to Production

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          ssh-keyscan -H ${{ secrets.PROD_DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Pre-deployment backup
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente
          
          # Create backup directory with timestamp
          BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
          mkdir -p backups/$BACKUP_DIR
          
          # Backup current application
          if [ -d "app" ]; then
            cp -r app backups/$BACKUP_DIR/
            echo "‚úÖ Application backed up to backups/$BACKUP_DIR"
          fi
          
          # Backup database
          if docker-compose -f docker-compose.prod.yml ps postgres | grep -q "Up"; then
            docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U financieramente_user financieramente_prod > backups/$BACKUP_DIR/database_backup.sql
            echo "‚úÖ Database backed up to backups/$BACKUP_DIR/database_backup.sql"
          fi
          EOF

      - name: Copy files to server
        run: |
          # Create app directory structure
          ssh root@${{ secrets.PROD_DROPLET_IP }} "mkdir -p /opt/financieramente/app"
          
          # Copy application files
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next' \
            --exclude='*.log' \
            ./ root@${{ secrets.PROD_DROPLET_IP }}:/opt/financieramente/app/

      - name: Copy Docker files
        run: |
          # Copy Docker configuration
          scp -r ./docker/* root@${{ secrets.PROD_DROPLET_IP }}:/opt/financieramente/

      - name: Setup environment variables
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente
          
          # Create environment file
          cat > .env << 'ENVEOF'
          NODE_ENV=production
          POSTGRES_USER=financieramente_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PROD }}
          POSTGRES_DB=financieramente_prod
          DATABASE_URL=postgresql://financieramente_user:${{ secrets.POSTGRES_PASSWORD_PROD }}@postgres:5432/financieramente_prod
          NEXT_PUBLIC_API_URL=http://${{ secrets.PROD_DROPLET_IP }}
          ENVEOF
          
          # Copy environment to app directory
          cp .env app/.env
          EOF

      - name: Run database migrations
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente/app
          
          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          sleep 30
          
          # Run Prisma migrations
          npx prisma migrate deploy
          EOF

      - name: Deploy application
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente
          
          # Stop existing containers gracefully
          docker-compose -f docker-compose.prod.yml down --timeout 30 || true
          
          # Build and start new containers
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 90
          EOF

      - name: Health check
        run: |
          # Wait a bit more for services to stabilize
          sleep 30
          
          # Check if the application is responding
          for i in {1..15}; do
            if curl -f http://${{ secrets.PROD_DROPLET_IP }}/health; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i/15 failed, retrying..."
              sleep 10
            fi
          done
          
          # Final health check
          if ! curl -f http://${{ secrets.PROD_DROPLET_IP }}/health; then
            echo "‚ùå Health check failed after 15 attempts"
            exit 1
          fi

      - name: Verify database connection
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente/app
          
          # Test database connection
          if npx prisma db pull --print > /dev/null 2>&1; then
            echo "‚úÖ Database connection verified"
          else
            echo "‚ùå Database connection failed"
            exit 1
          fi
          EOF

      - name: Verify all services
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente
          
          # Check all containers are running
          if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "‚úÖ All containers are running"
            docker-compose -f docker-compose.prod.yml ps
          else
            echo "‚ùå Some containers are not running"
            docker-compose -f docker-compose.prod.yml ps
            exit 1
          fi
          EOF

      - name: Cleanup old images
        run: |
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          # Remove unused Docker images (keep last 3)
          docker image prune -f
          
          # Remove old backups (keep last 7 days)
          find /opt/financieramente/backups -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
          EOF

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ Deployment to Production completed successfully!"
          echo "üåê Production Environment: http://${{ secrets.PROD_DROPLET_IP }}"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "‚è∞ Deployed at: $(date)"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Deployment to Production failed! Initiating rollback..."
          
          ssh root@${{ secrets.PROD_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente
          
          # Find the latest backup
          LATEST_BACKUP=$(ls -t backups/ | head -n1)
          
          if [ -n "$LATEST_BACKUP" ]; then
            echo "üîÑ Rolling back to backup: $LATEST_BACKUP"
            
            # Stop current containers
            docker-compose -f docker-compose.prod.yml down
            
            # Restore application files
            if [ -d "backups/$LATEST_BACKUP/app" ]; then
              rm -rf app
              cp -r backups/$LATEST_BACKUP/app .
              echo "‚úÖ Application files restored"
            fi
            
            # Restart with previous version
            docker-compose -f docker-compose.prod.yml up -d
            
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No backup found for rollback"
          fi
          EOF

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment to Production failed!"
          echo "üîç Check the logs above for details"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "‚è∞ Failed at: $(date)"
