name: Deploy to QA

on:
  push:
    branches: [qa]
  pull_request:
    branches: [qa]

env:
  NODE_VERSION: "20"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: |
          echo "Prisma client generation temporarily disabled - schema not configured yet"
          # npx prisma generate

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  deploy:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: |
          echo "Prisma client generation temporarily disabled - schema not configured yet"
          # npx prisma generate

      - name: Build application
        run: npm run build

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.QA_DROPLET_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=30 -o BatchMode=yes root@${{ secrets.QA_DROPLET_IP }} "echo 'SSH connection successful'"

      - name: Copy files to server
        run: |
          # Create app directory structure
          ssh -o ConnectTimeout=30 root@${{ secrets.QA_DROPLET_IP }} "mkdir -p /opt/financieramente/app"

          # Copy application files with retry logic
          for i in {1..3}; do
            if rsync -avz --delete \
              --exclude='.git' \
              --exclude='node_modules' \
              --exclude='.next' \
              --exclude='*.log' \
              --timeout=300 \
              ./ root@${{ secrets.QA_DROPLET_IP }}:/opt/financieramente/app/; then
              echo "‚úÖ Files copied successfully"
              break
            else
              echo "‚ùå File copy attempt $i failed, retrying..."
              sleep 10
            fi
          done

      - name: Copy Docker files
        run: |
          # Copy Docker configuration with retry logic
          for i in {1..3}; do
            if scp -r -o ConnectTimeout=30 ./docker/* root@${{ secrets.QA_DROPLET_IP }}:/opt/financieramente/; then
              echo "‚úÖ Docker files copied successfully"
              break
            else
              echo "‚ùå Docker files copy attempt $i failed, retrying..."
              sleep 10
            fi
          done

      - name: Setup environment variables
        run: |
          ssh -o ConnectTimeout=30 root@${{ secrets.QA_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente

          # Create environment file
          cat > .env << 'ENVEOF'
          NODE_ENV=qa
          POSTGRES_USER=financieramente_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_QA }}
          POSTGRES_DB=financieramente_qa
          DATABASE_URL=postgresql://financieramente_user:${{ secrets.POSTGRES_PASSWORD_QA }}@postgres:5432/financieramente_qa
          NEXT_PUBLIC_API_URL=http://${{ secrets.QA_DROPLET_IP }}
          ENVEOF

          # Copy environment to app directory
          cp .env app/.env
          echo "‚úÖ Environment variables configured"
          EOF

      - name: Run database migrations
        run: |
          echo "Database migrations temporarily disabled - Prisma schema not configured yet"
          # ssh root@${{ secrets.QA_DROPLET_IP }} << 'EOF'
          # cd /opt/financieramente/app
          # 
          # # Wait for database to be ready
          # echo "Waiting for database to be ready..."
          # sleep 30
          # 
          # # Run Prisma migrations
          # npx prisma migrate deploy
          # EOF

      - name: Deploy application
        run: |
          ssh -o ConnectTimeout=30 root@${{ secrets.QA_DROPLET_IP }} << 'EOF'
          cd /opt/financieramente

          # Stop existing containers gracefully
          echo "Stopping existing containers..."
          docker-compose -f docker-compose.qa.yml down --timeout 30 || true

          # Clean up any orphaned containers
          docker container prune -f || true

          # Build and start new containers
          echo "Building new containers..."
          docker-compose -f docker-compose.qa.yml build --no-cache --parallel

          echo "Starting new containers..."
          docker-compose -f docker-compose.qa.yml up -d

          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 60

          # Check container status
          echo "Container status:"
          docker-compose -f docker-compose.qa.yml ps
          EOF

      - name: Health check
        run: |
          # Wait a bit more for services to stabilize
          sleep 30

          # Check if the application is responding
          echo "Starting health check..."
          for i in {1..15}; do
            echo "Health check attempt $i/15..."
            if curl -f --connect-timeout 10 --max-time 30 http://${{ secrets.QA_DROPLET_IP }}/api/health; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i/15 failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

          # Final health check
          if ! curl -f --connect-timeout 10 --max-time 30 http://${{ secrets.QA_DROPLET_IP }}/api/health; then
            echo "‚ùå Health check failed after 15 attempts"
            echo "Checking container logs..."
            ssh -o ConnectTimeout=30 root@${{ secrets.QA_DROPLET_IP }} "cd /opt/financieramente && docker-compose -f docker-compose.qa.yml logs --tail=50"
            exit 1
          fi

      - name: Verify database connection
        run: |
          echo "Database connection verification temporarily disabled - Prisma schema not configured yet"
          # ssh root@${{ secrets.QA_DROPLET_IP }} << 'EOF'
          # cd /opt/financieramente/app
          # 
          # # Test database connection
          # if npx prisma db pull --print > /dev/null 2>&1; then
          #   echo "‚úÖ Database connection verified"
          # else
          #   echo "‚ùå Database connection failed"
          #   exit 1
          # fi
          # EOF

      - name: Cleanup old images
        run: |
          ssh -o ConnectTimeout=30 root@${{ secrets.QA_DROPLET_IP }} << 'EOF'
          # Remove unused Docker images
          docker image prune -f

          # Remove unused volumes
          docker volume prune -f

          # Show disk usage
          echo "Disk usage after cleanup:"
          df -h
          EOF

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ Deployment to QA completed successfully!"
          echo "üåê QA Environment: http://${{ secrets.QA_DROPLET_IP }}"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment to QA failed!"
          echo "üîç Check the logs above for details"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"

      - name: Cleanup SSH agent
        if: always()
        run: |
          echo "Cleaning up SSH agent..."
          ssh-add -D || true
          echo "SSH agent cleanup completed"
